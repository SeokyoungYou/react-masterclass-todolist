{"version":3,"sources":["atoms.tsx","components/CreateCategory.tsx","components/CreateToDo.tsx","components/SelectCategory.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","TO_DO","DOING","DONE","TODOS_LS","CATS_LS","localStorageToDos","localStorage","getItem","parsedToDos","JSON","parse","toDoState","atom","key","default","length","categoryState","toDoSelector","selector","get","toDos","category","filter","toDo","cats","savedCats","parsedCats","CreateCategory","useForm","register","handleSubmit","setValue","onSubmit","Object","assign","setItem","stringify","required","placeholder","Array","savedToDos","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","newTodo","text","id","Date","now","oldToDos","push","SelectCategory","useRecoilState","setCategory","value","onInput","event","currentTarget","keys","map","Cat","ToDo","onClick","name","targetIndex","findIndex","newToDo","returnToDo","slice","ToDoList","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"uMAGaA,EAAa,CACxBC,MAAO,QACPC,MAAO,QACPC,KAAM,QAOKC,EAAW,eACtBC,EAAU,cAENC,EAAoBC,aAAaC,QAAQJ,GACzCK,EAAcC,KAAKC,MAAML,GAClBM,EAAYC,YAAc,CACrCC,IAAK,OACLC,SAAoB,OAAXN,QAAW,IAAXA,OAAA,EAAAA,EAAaO,QAAS,EAAIP,EAAc,KAEtCQ,EAAgBJ,YAAa,CAExCC,IAAK,WACLC,QAASf,EAAWC,QAGTiB,EAAeC,YAAS,CACnCL,IAAK,eACLM,IAAK,YAAc,IAAXA,EAAU,EAAVA,IACAC,EAAQD,EAAIR,GACZU,EAAWF,EAAIH,GACrB,OAAOI,EAAME,QAAO,SAACC,GAAD,OAAUA,EAAKF,WAAaA,Q,sBC1BzCG,EAAO,GAmBlB,IAAMC,EAAYnB,aAAaC,QAAQH,GACvC,GAAkB,OAAdqB,EAAoB,CACtB,IAAMC,EAAajB,KAAKC,MAAMe,GAC9BD,EAAOE,EAEMC,MAvBf,WACE,MAA6CC,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAOhC,OACE,uBAAMC,SAAUF,GAPE,SAAC,GAAyB,IAAvBT,EAAsB,EAAtBA,SACrBY,OAAOC,OAAOnC,EAAdkC,OAAA,IAAAA,CAAA,GAA6BZ,EAAWA,IACxCY,OAAOC,OAAOV,EAAMzB,GACpBO,aAAa6B,QAAQ/B,EAASK,KAAK2B,UAAUZ,IAC7CO,EAAS,WAAY,OAGrB,UACE,iDACMF,EAAS,WAAY,CAAEQ,SAAU,6BADvC,IAEEC,YAAY,0BAEd,sD,OCfKlB,EAAQ,IAAImB,MA2BvB,IAAMC,EAAalC,aAAaC,QAAQJ,GACxC,GAAmB,OAAfqC,EAAqB,CACvB,IAAMhC,EAAcC,KAAKC,MAAM8B,GAC/BpB,EAAQZ,EAGKiC,MAhCf,WACE,IAGMC,EAAWC,YAAkBhC,GAC7BU,EAAWuB,YAAe5B,GAChC,EAA6CY,cAArCC,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aAAcC,EAAhC,EAAgCA,SAQhC,OACE,uBAAMC,SAAUF,GARE,SAAC,GAAqB,IAClCe,EAAU,CAAEC,KADqB,EAAlBvB,KACSwB,GAAIC,KAAKC,MAAO5B,YAC9CqB,GAAS,SAACQ,GAAD,OAAeL,GAAf,mBAA2BK,OACpC9B,EAAM+B,KAAKN,GARXvC,aAAa6B,QAAQhC,EAAUM,KAAK2B,UAAUhB,IAU9CW,EAAS,OAAQ,OAGjB,UACE,iDACMF,EAAS,OAAQ,CACnBQ,SAAU,0BAFd,IAIEC,YAAY,mBAEd,mD,OCbSc,MAbf,WACE,MAAgCC,YAAerC,GAA/C,mBAAOK,EAAP,KAAiBiC,EAAjB,KAIA,OACE,wBAAQC,MAAOlC,EAAUmC,QAJX,SAACC,GACfH,EAAYG,EAAMC,cAAcH,QAGhC,SACGtB,OAAO0B,KAAKnC,GAAMoC,KAAI,SAACC,GAAD,OACrB,wBAAQN,MAAOM,EAAf,SAAqBA,UCyBdC,MAjCf,YAA8C,IAA9BhB,EAA6B,EAA7BA,KAAMzB,EAAuB,EAAvBA,SAAU0B,EAAa,EAAbA,GACxBL,EAAWC,YAAkBhC,GAC7BoD,EAAU,SAACN,GACf,IACmBO,EACfP,EADFC,cAAiBM,KAEnBtB,GAAS,SAACQ,GACR,IAAMe,EAAcf,EAASgB,WAAU,SAAC3C,GAAD,OAAUA,EAAKwB,KAAOA,KACvDoB,EAAU,CAAErB,OAAMC,KAAI1B,SAAU2C,GAChCI,EAAU,sBACXlB,EAASmB,MAAM,EAAGJ,IADP,CAEdE,GAFc,YAGXjB,EAASmB,MAAMJ,EAAc,KAGlC,OADA3D,aAAa6B,QAAQhC,EAAUM,KAAK2B,UAAUgC,IACvCA,MAGX,OACE,+BACE,+BAAOtB,IACNb,OAAO0B,KAAKnC,GAAMoC,KACjB,SAACC,GAAD,OACExC,IAAawC,GACX,wBAAQG,KAAMH,EAAKE,QAASA,EAA5B,SACGF,WCKAS,I,EAAAA,EAnBf,WACE,IAAMlD,EAAQwB,YAAe3B,GAI7B,OACE,gCACE,wCACA,uBACA,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,IALF,OAMGG,QANH,IAMGA,OANH,EAMGA,EAAOwC,KAAI,SAACrC,GAAD,OACV,cAAC,EAAD,eAAwBA,GAAbA,EAAKwB,WCzBlBwB,EAAcC,YAAH,u+CAuDI,SAACC,GAAD,OAAWA,EAAMC,MAAMC,WAClC,SAACF,GAAD,OAAWA,EAAMC,MAAME,aAkBlBC,MATf,WACE,OACE,qCACE,cAACN,EAAD,IACA,cAAC,EAAD,QChENO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAeN,MCTkB,CACrCC,QAAS,UACTC,UAAW,QACXK,YAAa,UACbC,YAAa,eDKT,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.b9ef9631.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\nimport { toDos } from \"./components/CreateToDo\";\r\n\r\nexport const Categories = {\r\n  TO_DO: \"TO_DO\",\r\n  DOING: \"DOING\",\r\n  DONE: \"DONE\",\r\n};\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: string; //Categories;\r\n}\r\nexport const TODOS_LS = \"currentToDos\",\r\n  CATS_LS = \"currentCats\";\r\n\r\nconst localStorageToDos = localStorage.getItem(TODOS_LS);\r\nconst parsedToDos = JSON.parse(localStorageToDos as any);\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: parsedToDos?.length > 0 ? parsedToDos : [],\r\n});\r\nexport const categoryState = atom<string>({\r\n  //Categories\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { useForm } from \"react-hook-form\";\nimport { useSetRecoilState } from \"recoil\";\nimport { Categories, categoryState, CATS_LS } from \"../atoms\";\n\ninterface IForm {\n  category: string;\n}\nexport let cats = {};\nfunction CreateCategory() {\n  const { register, handleSubmit, setValue } = useForm<IForm>();\n  const handleValid = ({ category }: IForm) => {\n    Object.assign(Categories, { [category]: category });\n    Object.assign(cats, Categories);\n    localStorage.setItem(CATS_LS, JSON.stringify(cats));\n    setValue(\"category\", \"\");\n  };\n  return (\n    <form onSubmit={handleSubmit(handleValid)}>\n      <input\n        {...register(\"category\", { required: \"Please write a category\" })}\n        placeholder=\"Wirte a new category\"\n      />\n      <button>Add category</button>\n    </form>\n  );\n}\nconst savedCats = localStorage.getItem(CATS_LS);\nif (savedCats !== null) {\n  const parsedCats = JSON.parse(savedCats);\n  cats = parsedCats;\n}\nexport default CreateCategory;\n","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, IToDo, toDoState, TODOS_LS } from \"../atoms\";\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nexport let toDos = new Array<IToDo>();\r\nfunction CreateToDo() {\r\n  const saveToDos = () => {\r\n    localStorage.setItem(TODOS_LS, JSON.stringify(toDos));\r\n  };\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    const newTodo = { text: toDo, id: Date.now(), category };\r\n    setToDos((oldToDos) => [newTodo, ...oldToDos]);\r\n    toDos.push(newTodo);\r\n    saveToDos();\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add to do</button>\r\n    </form>\r\n  );\r\n}\r\nconst savedToDos = localStorage.getItem(TODOS_LS);\r\nif (savedToDos !== null) {\r\n  const parsedToDos = JSON.parse(savedToDos);\r\n  toDos = parsedToDos;\r\n}\r\n\r\nexport default CreateToDo;\r\n","import { useRecoilState } from \"recoil\";\nimport { Categories, categoryState } from \"../atoms\";\nimport { cats } from \"./CreateCategory\";\n\nfunction SelectCategory() {\n  const [category, setCategory] = useRecoilState(categoryState);\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\n    setCategory(event.currentTarget.value as any);\n  };\n  return (\n    <select value={category} onInput={onInput}>\n      {Object.keys(cats).map((Cat) => (\n        <option value={Cat}>{Cat}</option>\n      ))}\n    </select>\n  );\n}\nexport default SelectCategory;\n","import { useSetRecoilState } from \"recoil\";\r\nimport { Categories, IToDo, toDoState, TODOS_LS } from \"../atoms\";\r\nimport { cats } from \"./CreateCategory\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n      const returnToDo = [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n      localStorage.setItem(TODOS_LS, JSON.stringify(returnToDo));\r\n      return returnToDo;\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {Object.keys(cats).map(\r\n        (Cat) =>\r\n          category !== Cat && (\r\n            <button name={Cat} onClick={onClick}>\r\n              {Cat}\r\n            </button>\r\n          )\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport {\r\n  Categories,\r\n  categoryState,\r\n  toDoSelector,\r\n  toDoState,\r\n  IToDo,\r\n  TODOS_LS,\r\n} from \"../atoms\";\r\nimport CreateCategory from \"./CreateCategory\";\r\nimport CreateToDo, { toDos } from \"./CreateToDo\";\r\nimport SelectCategory from \"./SelectCategory\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  // const savedToDos = localStorage.getItem(TODOS_LS);\r\n  // const toDos = JSON.parse(savedToDos || \"\");\r\n  // const toDos = JSON.parse(localStorage.getItem(TODOS_LS || \"\")!);\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <CreateCategory />\r\n      <SelectCategory />\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <ToDoList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { IToDo } from \"./atoms\";\r\nimport { darkTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};\r\n"],"sourceRoot":""}